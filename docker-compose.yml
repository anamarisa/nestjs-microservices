networks:
  kong-net:       # one shared network for Kong + all services
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5436:5432"
    networks:
      - kong-net

  kong-migrations:
    image: kong:3.7
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database
    networks:
      - kong-net

  kong:
    image: kong:3.7
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      - kong-database
      - sales-service
    networks:
      - kong-net

  # Konga
  konga:
    image: pantsel/konga:latest
    restart: always
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=development
    depends_on:
      - kong
    networks:
      - kong-net

  # Customer Service
  customer-db:
    image: postgres:13
    environment:
      POSTGRES_DB: customer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: altindo@123
    ports:
      - "5435:5432"
    volumes:
      - customer-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d customer"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  customer-service:
    build:
      context: .
      dockerfile: ./apps/customer-service/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001:3001"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - DATABASE_URL=postgresql://postgres:altindo%40123@customer-db:5432/customer
      - NODE_ENV=development
    depends_on:
      rabbitmq:
        condition: service_healthy
      customer-db:
        condition: service_started
    command: npm run start:dev:customer-service
    networks:
      - kong-net

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "4000:4000"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - NODE_ENV=development
    depends_on:
      rabbitmq:
        condition: service_healthy
      customer-service:
        condition: service_started
      product-service:
        condition: service_started
      sales-service:
        condition: service_started
    command: npm run start:dev:api-gateway
    networks:
      - kong-net

  # Product Service
  product-db:
    image: postgres:13
    environment:
      POSTGRES_DB: product
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: altindo@123
    ports:
      - "5433:5432"
    volumes:
      - product-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d product"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  product-service:
    build:
      context: .
      dockerfile: ./apps/product-service/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3002:3002"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - DATABASE_URL=postgresql://postgres:altindo%40123@product-db:5432/product
      - NODE_ENV=development
    depends_on:
      rabbitmq:
        condition: service_healthy
      product-db:
        condition: service_started
    command: npm run start:dev:product-service
    networks:
      - kong-net

  # Sales Service
  sales-db:
    image: postgres:13
    environment:
      POSTGRES_DB: sales
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: altindo@123
    ports:
      - "5434:5432"
    volumes:
      - sales-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sales"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kong-net

  sales-service:
    build:
      context: .
      dockerfile: ./apps/sales-service/Dockerfile
      target: development
    container_name: sales-service
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - DATABASE_URL=postgresql://postgres:altindo%40123@sales-db:5432/sales
      - NODE_ENV=development
    depends_on:
      rabbitmq:
        condition: service_healthy
      sales-db:
        condition: service_started
    command: npm run start:dev:sales-service
    networks:
      - kong-net

volumes:
  customer-data:
  product-data:
  sales-data:
  kong_db_data: {}
